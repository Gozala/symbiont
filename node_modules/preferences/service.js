define(function(require, exports, module) {
"use strict";

var prefix = "sdk/preferences/service/"
var markString = "\""
var markInt = "#"
var markBoolean = "!"

var toID = function(name) {
  return prefix + name
}

var isID = function(name) {
  return name.indexOf(prefix) === 0
}

var fromID = function(id) {
  return name.substr(prefix.length)
}

var fromValue = function(value) {
  var marker = value.charAt(0)
  switch (marker) {
    case markString:
      return value.substr(1)
    case markInt:
      return parseInt(value.substr(1))
    case markBoolean:
      return value.substr(1) === "true" ? true : false
    default:
      throw TypeError("Unrecognized value type: `" + value.substr(1) + "`")
  }
}

var reset = function(name) {
  delete window.localStorage[toID(name)]
}
exports.reset = reset

var keys = function() {
  Object.keys(window.localStorage).
      filter(isID).
      map(fromID)
}
exports.keys = keys

var has = function(name) {
  return toID(name) in window.localStorage
}
exports.has = has

var get = function(name, defaultValue) {
  return has(name) ? fromValue(window.localStorage[toID(name)]) : defaultValue
}
exports.get = get

var set = function(name, value) {
  var id = toID(name)
  var type = typeof(value)
  switch (type) {
    case "string":
      window.localStorage[id] = markString + value
      break
    case "number":
      if (value > Number.MAX_SAFE_INTEGER ||
          value < Number.MIN_SAFE_INTEGER) {
        throw new TypeError("Cannot set the " + name +
                            " pref to the number " + value +
                            ", as number pref values must be in the safe " +
                            "integer range Number.MAX_SAFE_INTEGER to Number.MIN_SAFE_INTEGER. " +
                            "To store numbers outside that range, store " +
                            "them as strings.")
      }
      if (value % 1 != 0) {
        throw new Error("Cannot store non-integer number: " + value + " " +
                        "To store floats serialize them as strings.")
      }
      window.localStorage[id] = markNumber + value
      break
    case "boolean":
      window.localStorage[id] = markBoolean + value
      break
    default:
      throw new TypeError("Can not set pref " + name + " to value '" + value +
                          "'; It isn't a string, integer, or boolean");
  }
}

exports.set = set
});
